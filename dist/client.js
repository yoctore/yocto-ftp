/* yocto-ftp - Manage FTP connection on FTP Server - V1.0.0 */

"use strict";function FTPClient(a,b,c){this.client=new Client,this.name=[_.isString(b)&&!_.isEmpty(b)?b:[a.user,":",a.password,"@",a.host,":",a.port].join(""),moment().format("YYYYMMDD-HHmmss")].join("-"),this.connected=!1,this.logger=c,this.options=a,this.client.on("greeting",function(a){this.logger.debug(["[ FTPClient.on.greeting ] -",a].join(" "))}.bind(this)),this.client.on("close",function(){this.logger.debug(["[ FTPClient.on.close ] -","Connection was closed on",a.host].join(" ")),this.connected=!1}.bind(this)),this.client.on("end",function(){this.logger.debug(["[ FTPClient.on.end ] -","Connection was ended on",a.host].join(" ")),this.connected=!1}.bind(this))}var Client=require("ftp"),_=require("lodash"),utils=require("yocto-utils"),Q=require("q"),joi=require("joi"),Readable=require("stream").Readable,fs=require("fs"),moment=require("moment"),util=require("util"),EventEmitter=require("events");util.inherits(FTPClient,EventEmitter),FTPClient.prototype.connect=function(){var a=Q.defer();return this.client.on("ready",function(){return this.logger.debug(["[ FTPClient.on.ready ] -","Connection succeed on",this.options.host,"with options :",utils.obj.inspect(this.options),"for connection :",this.name].join(" ")),this.connected=!0,a.resolve()}.bind(this)),this.client.on("error",function(b){return this.logger.error(["[ FTPClient.on.error ] -","An error occured on",this.options.host,":",b].join(" ")),a.reject(b)}.bind(this)),this.client.connect(this.options),a.promise},FTPClient.prototype.put=function(a,b,c){var d=Q.defer();if(!this.connected)return this.logger.error(["[ FTPClient.on.put ] -","Cannot upload file on",this.options.host,"client is not connected"].join(" ")),d.reject("Not connected");var e=joi.validate({source:a,destination:b,compression:c},joi.object().required().keys({source:joi.string().required().empty(),destination:joi.string().required().empty(),compression:joi.boolean().optional().default(!1)}));return _.isNull(e.error)?(fs.stat(e.value.source,function(a,b){var c,f=0,g=0;if(a&&(this.logger.warning(["[ FTPClient.on.put ] - given source is not a file","try to upload data from string"].join(" ")),"ENAMETOOLONG"===a.code))return this.logger.error(["[ FTPClient.on.put ] - given source is too big.","Maybe try to upload from a temporary file ? (",a.code,")"].join(" ")),d.reject(a);_.isUndefined(b)?(c=new Readable,c.push(e.value.source),c.push(null),f=e.value.source.length):(b&&b.isFile()&&(c=fs.createReadStream(e.value.source),f=b.size),b&&b.isDirectory()&&console.log("must use mkdir command")),this.logger.debug(["[ FTPClient.on.put.progress ] - File size is :",f,"bytes"].join(" ")),c.on("data",function(a){g+=a.length;var b=Math.round(g/f*100);this.logger.debug(["[ FTPClient.on.put.progress ] -",["uploading, progress is :",b,"%"].join(" ")].join(" ")),this.emit("progress",{percent:b,totalBytes:f,currentBytes:g})}.bind(this)),this.client.put(c,e.value.destination,e.value.compression,function(a){return a?(this.logger.error(["[ FTPClient.on.put ] - Cannot upload",b&&b.isFile()?"file":"data","on",[this.options.host,e.value.destination].join("/"),":",a].join(" ")),d.reject(a)):(this.logger.debug(["[ FTPClient.on.put ] -","uploaded",b&&b.isFile()?"file":"data","on",[this.options.host,e.value.destination].join("/"),"succeed"].join(" ")),d.resolve())}.bind(this))}.bind(this)),d.promise):(this.logger.error(["[ FTPClient.on.put ] -","Cannot upload file on",this.options.host,"input is not valid :",e.error].join(" ")),d.reject(e.error))},FTPClient.prototype.fastPut=function(a,b,c){var d=Q.defer();return this.logger.debug(["[ FTPClient.on.putFast ] -","Try to run a fast put request"].join(" ")),this.connect().then(function(){this.put(a,b,c).then(function(a){return this.gracefullDisconnect(),d.resolve(a)}.bind(this)).catch(function(a){return this.gracefullDisconnect(),d.reject(a)}.bind(this))}.bind(this)).catch(function(a){return this.gracefullDisconnect(),d.reject(a)}.bind(this)),d.promise},FTPClient.prototype.hardDisconnect=function(){return this.logger.debug(["[ FTPClient.on.hardDisconnect ] -","A hard disconnection was asked."].join(" ")),this.client.destroy()},FTPClient.prototype.gracefullDisconnect=function(){return this.logger.debug(["[ FTPClient.on.gracefullDisconnect ] -","A gracefull disconnection was asked."].join(" ")),this.client.end()},module.exports=FTPClient;